# -*- coding: utf-8 -*-
"""
Created on Wed Jan  4 15:37:56 2023

@author: xiangyu066

Notes:
    
    1. The file of Seg_label_results is generated by EvolutionTree_Example1.py

"""

#%%
print("Running...")
import pickle, glob, os
import numpy as np
import matplotlib.pyplot as plt
import time
import warnings
warnings.simplefilter("ignore")

#
import MoPy.BacterialContour as BC
import MoPy as mo
print("MoPy package is "+mo.__version__+".")

print("------------------------------------------------------------------")

#%% Single-cell size-profile meausrement 
# eff_pixelsize=0.052 # um
# inputdir=r'.\Datasets\EvolutionTree\E. coli\HM06 (from CYC)\Gelpad\1228_PC test'

eff_pixelsize=0.065 # um
inputdir=r'.\Datasets\EvolutionTree\V. alginolyicus\VIO5\Gelpad\20230302'

nFile=0 # starting index of file is 0
nCell_list=[41,48] # the labelling number show on the last frame

#%%
# read pickle data
with open(inputdir+'\\Analyzed\\Seg_label_results','rb') as f: data=pickle.load(f)
TrackTrees=data[0]
TrackLists=data[1]

Tree = TrackTrees[nFile]
Cs_list = TrackLists[nFile]
nFrames=Tree.shape[1]

# profile analysis
for nCell in nCell_list:
    # Create a single directory
    listing=glob.glob(inputdir+'\\*.tif')
    inputfile=listing[nFile]
    outputdir_name=inputfile.replace(inputdir+'\\','')
    outputdir_name=outputdir_name.replace('.tif','')
    outputdir=inputdir+'\\Analyzed\\'+outputdir_name+'\\Cell_'+str(nCell)
    if not os.path.exists(outputdir): os.makedirs(outputdir)

    # initialize
    cell_length=np.zeros((nFrames,))
    cell_width=np.zeros((nFrames,))
    cell_bending=np.zeros((nFrames,))
    
    # extract size profile
    for nFrame in range(nFrames):
        print('Processing...(current frame: '+str(nFrame+1)+' / total frames: '+str(nFrames)+')')
        
        idx=Tree[nCell,nFrame]
        x,y=Cs_list[nFrame][idx][:,0],Cs_list[nFrame][idx][:,1]
        x=x*eff_pixelsize
        y=y*eff_pixelsize
        
        # show
        plt.figure(figsize=(6,6))
        plt.plot(x,y,'.',label='data',markersize=3)
        plt.xlabel('X [um]',weight='bold',fontsize=24)
        plt.ylabel('Y [um]',weight='bold',fontsize=24)
        plt.title('idx = %d @ nFrame = %d'%(idx,nFrame))
        plt.xticks(fontsize=14)
        plt.yticks(fontsize=14)
        plt.axis('equal')
        plt.grid(lw=0.3)
        
        # fitting
        try:
            tic=time.time()
            out=BC.modified_SuperEllipse_Fit(x, y,'gpu')
            print("--- %s seconds ---" % (time.time()-tic))
            
            # collect fittung results
            a=out.params['a'].value
            b=out.params['b'].value
            m=out.params['m'].value
            rx=2*a/m
            n=out.params['n'].value
            ry=2*b/n
            k=out.params['k'].value
            p=out.params['p'].value
            s0=out.params['s0'].value
            x0=out.params['x0'].value
            y0=out.params['y0'].value
            phi=out.params['phi'].value
            
            # save fitting parameters
            cell_length[nFrame,]=2*a
            cell_width[nFrame,]=2*b
            cell_bending[nFrame,]=abs(k)
            
            fit_x,fit_y=BC.modified_SuperEllipse(a,b,rx,ry,k,p,s0,x0,y0,phi)
            print("--- The fitting result is shown as below ---")
            print("The semi-major length: %s [um]" %a)
            print("The semi-minor length: %s [um]" %b)
            print("The curvature in x direction: %s [1/um]" %rx)
            print("The curvature in y direction: %s [1/um]" %ry)
            print("The bending coefficient: %s [1/um]" %k)
            print("The egg slope: %s" %p)
            print("The elongation offset: %s [um]" %s0)
            print("The centerof x: %s" %x0)
            print("The centerof y: %s" %y0)
            print("The rotating angle [deg]: %s" %phi)
            print("------------------------------------------------------------------")
            
            # show fitting result
            plt.plot(fit_x,fit_y,label='fitting',lw=1)
            
        except ValueError:
            print('Something wrong in fitting process.')
            cell_length[nFrame,]=np.nan
            cell_width[nFrame,]=np.nan
            
        # save figure
        plt.legend(fontsize=14)
        plt.savefig(outputdir+'\\'+str(nFrame)+'.png',bbox_inches='tight')
        plt.show()
    
    # save analysis results
    np.savetxt(outputdir+'\\length.csv', cell_length, delimiter=',')
    np.savetxt(outputdir+'\\width.csv', cell_width, delimiter=',')
    np.savetxt(outputdir+'\\bending.csv', cell_bending, delimiter=',')
    
    # show single-cell size evolution
    plt.figure()
    plt.plot(cell_length,'o-')
    plt.xlabel('nFrame',weight='bold',fontsize=24)
    plt.ylabel('Length [um]',weight='bold',fontsize=24)
    plt.savefig(outputdir+'\\length.png',bbox_inches='tight')
    plt.show()
    
    plt.figure()
    plt.plot(cell_width,'o-')
    plt.xlabel('nFrame',weight='bold',fontsize=24)
    plt.ylabel('Width [um]',weight='bold',fontsize=24)
    plt.savefig(outputdir+'\\width.png',bbox_inches='tight')
    plt.show()
    
    plt.figure()
    plt.plot(cell_bending,'o-')
    plt.xlabel('nFrame',weight='bold',fontsize=24)
    plt.ylabel('Bending: k [1/um]',weight='bold',fontsize=24)
    plt.savefig(outputdir+'\\bending.png',bbox_inches='tight')
    plt.show()

#%%
print('Done.')